<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorial | Mininet]]></title>
  <link href="http://mininet.org/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://mininet.org/"/>
  <updated>2022-04-01T15:18:11-07:00</updated>
  <id>http://mininet.org/</id>
  <author>
    <name><![CDATA[Mininet Project Contributors]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Minininet Tutorial at SIGCOMM]]></title>
    <link href="http://mininet.org/blog/2014/12/08/mininet-tutorial-at-sigcomm/"/>
    <updated>2014-12-08T12:00:00-08:00</updated>
    <id>http://mininet.org/blog/2014/12/08/mininet-tutorial-at-sigcomm</id>
    <content type="html"><![CDATA[<p>Materials from our tutorial at SIGCOMM 2014,
<a href="http://conferences.sigcomm.org/sigcomm/2014/tutorial-mininet.php">“Teaching Computer Networking with Mininet”</a>, are available on
<a href="http://teaching.mininet.org">teaching.mininet.org</a>.
The original announcement follows.</p>

<hr />

<p><strong>Call for Participation:</strong></p>

<h3 id="mininet-tutorial---teaching-computer-networking-with-mininet">Mininet Tutorial - Teaching Computer Networking with Mininet</h3>

<p><a href="http://conferences.sigcomm.org/sigcomm/2014/tutorial-mininet.php">http://conferences.sigcomm.org/sigcomm/2014/tutorial-mininet.php</a></p>

<p><strong>August 18th, Chicago, USA (in conjunction with SIGCOMM)</strong></p>

<hr />

<h3 id="important-dates">Important Dates</h3>

<ul>
  <li>Early Registration Deadline: July 11th, 11:59pm CDT</li>
  <li>Late Registration: July 12th - August 18th</li>
  <li>Tutorial Date: August 18th 8:30am - 12:00pm</li>
</ul>

<hr />

<h3 id="objective">Objective</h3>

<p>Sharing our experiences using the Mininet network
emulation platform to teach computer networking in a variety of
contexts ranging from small on-campus courses (Stanford, Georgia Tech,
MIT) to massive online courses. We believe that the Mininet platform
can make teaching and learning computer networking more fun and
effective by facilitating experiential learning.</p>

<hr />

<h3 id="program">Program</h3>

<ul>
  <li>Introduce <a href="http://mininet.org">Mininet</a> to the broader network community, including its capabilities and limitations and some example use cases.</li>
  <li>Familiarize attendees with Mininet through hands-on exercises.</li>
  <li>Share our experiences using Mininet since 2011 for on-campus and massive online courses at Stanford, Georgia Tech and MIT.</li>
  <li>Disseminate assignments that we used at our universities and help to develop and expand an online repository of Mininet courseware.</li>
</ul>

<hr />

<h3 id="speakers-and-panelists">Speakers and Panelists</h3>

<ul>
  <li>Bob Lantz - ON.Lab</li>
  <li>Te-Yuan (TY) Huang - Stanford</li>
  <li>Vimalkumar Jeyakumar - Stanford</li>
  <li>Brian O’Connor - ON.Lab</li>
  <li>Nick Feamster - Georgia Tech</li>
  <li>Keith Winstein - MIT</li>
  <li>Anirudh Sivaraman - MIT</li>
</ul>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nick Feamster's SDN Course]]></title>
    <link href="http://mininet.org/blog/2013/07/11/sdn-course/"/>
    <updated>2013-07-11T17:53:00-07:00</updated>
    <id>http://mininet.org/blog/2013/07/11/sdn-course</id>
    <content type="html"><![CDATA[<p>I just want to put in a recommendation for Nick Feamster’s excellent Software Defined Networking course. It’s free on Coursera, and not only does he do a great job of clearly explaining SDN, network virtualization, and related topics, he has also created some excellent videos explaining the usage, design, and rationale for the Mininet system, which is also being used for programming assignments and labs in the course.</p>

<p>There are also interesting interviews with notable people like Martin Casado, David Clark, and Teemu Koponen. It’s quite excellent, very approachable for anyone who has a basic networking background, and highly recommended:</p>

<p><a href="https://www.coursera.org/course/sdn">https://www.coursera.org/course/sdn</a></p>

<p>The course has already started, but as of today (Thursday July 11th) you can still sign up for it.</p>

<p>-Bob</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating Controller Startup]]></title>
    <link href="http://mininet.org/blog/2013/06/03/automating-controller-startup/"/>
    <updated>2013-06-03T15:50:00-07:00</updated>
    <id>http://mininet.org/blog/2013/06/03/automating-controller-startup</id>
    <content type="html"><![CDATA[<p>One of Mininet’s key features is that it makes it very easy to create
a complete virtual network including hosts, switches, links and
OpenFlow controllers. By default, Mininet runs Open vSwitch
in OpenFlow mode, which requires an OpenFlow controller.</p>

<p>As you probably know, Mininet comes with built-in Controller() classes to
support several controllers, including the OpenFlow reference controller
(<code>controller</code>), Open vSwitch’s  <code>ovs-controller</code>,
and the now-deprecated NOX Classic.</p>

<p>You can easily choose which one you want when you invoke the <code>mn</code> command:</p>

<pre><code>sudo mn --controller ref
sudo mn --controller ovsc
sudo mn --controller NOX,pyswitch
</code></pre>

<p>Each of the above examples uses a controller which turns your OVS switches
into Ethernet bridges (aka learning switches.)</p>

<p>Note that <code>ovsc</code> is easy to install but only supports 16 switches.
You can install the reference controller (patched to support many switches)
using <code>install.sh -f</code>. (As of this writing, you can also install NOX
Classic using <code>install.sh -x</code>.)</p>

<h2 id="the-manual-way-using-remote-controllers">The manual way: using remote controllers</h2>

<p>But what do you do if you want another controller like POX? Well, one
way is to start up POX (or Beacon, Floodlight, etc.) in another terminal
window and then use <code>--controller remote</code>:</p>

<pre><code>sudo mn --controller remote,ip=127.0.0.1
</code></pre>

<p>If your controller is running locally, you can just use</p>

<pre><code>sudo mn --controller remote
</code></pre>

<p>You might be asking: is there a way for Mininet to automatically start
up my controller so that I don’t have to do it manually? The answer is,
of course, yes!</p>

<h2 id="the-automatic-way-1-using-the-command-line">The automatic way #1: using the command line</h2>

<p>The latest Mininet <code>master</code> branch allows you to change the command and
arguments for <code>--controller ref</code> to invoke another controller as
desired. For example, here’s how you could invoke POX:</p>

<pre><code>sudo mn --controller ref,command='python pox.py',cdir=$HOME/pox,cargs='openflow.of_01 --port=%s forwarding.l2_learning'
</code></pre>

<p>Note the following options:</p>

<p><code>cdir</code>: the directory to change to before invoking the controller</p>

<p><code>command</code>: the command to start your controller</p>

<p><code>cargs</code>: the controller’s arguments (including <code>%s</code> for wherever the controller’s listening port should go)</p>

<h2 id="the-super-automatic-way-2-creating-a-custom-controller-subclass">The super automatic way #2: creating a custom <code>Controller()</code> subclass</h2>

<p>This is much easier than it sounds, and it has worked in Mininet since
version 1.0!</p>

<p>Here is a custom class for POX’s l2_learning:</p>

<p>```python
from mininet.node import Controller
from os import environ</p>

<p>POXDIR = environ[ ‘HOME’ ] + ‘/pox’</p>

<p>class POX( Controller ):
    def <strong>init</strong>( self, name, cdir=POXDIR,
                  command=’python pox.py’,
                  cargs=( ‘openflow.of_01 –port=%s ‘
                          ‘forwarding.l2_learning’ ),
                  **kwargs ):
        Controller.<strong>init</strong>( self, name, cdir=cdir,
                             command=command,
                             cargs=cargs, **kwargs )</p>

<p>controllers={ ‘pox’: POX }
```</p>

<p>With this class saved into <code>pox.py</code>, you can now do the following:</p>

<pre><code>sudo mn --custom pox.py --controller pox
</code></pre>

<p>Additionally you can use the custom class in your Mininet scripts:</p>

<p>```python</p>

<h1 id="usrbinpython">!/usr/bin/python</h1>

<p>from mininet.log import setLogLevel
from mininet.net import Mininet
from mininet.topolib import TreeTopo
from mininet.cli import CLI</p>

<h1 id="we-assume-you-are-in-the-same-directory-as-poxpy">We assume you are in the same directory as pox.py</h1>
<p># or that it is loadable via PYTHONPATH
from pox import POX</p>

<p>setLogLevel( ‘info’ )</p>

<p>net = Mininet( topo=TreeTopo( depth=2, fanout=2 ),
               controller=POX )</p>

<p>net.start()
CLI( net )
net.stop()</p>

<p>```</p>

<p>Note that in this custom class we’ve simply changed
<code>__init__</code>, but in a more complicated example you might
wish to change the <code>start()</code> and <code>stop()</code> methods as
well.</p>
]]></content>
  </entry>
  
</feed>
